// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String
  password      String
  role          Role
  cycleTimeCOAs CycleTimeCOA[]
}

enum Role {
  MASTER
  MANAGER
  ADMIN
}

model Vessel {
  id               String             @id @default(uuid())
  email            String             @unique
  name             String
  password         String
  fleet            String
  type             String
  attendanceRecord AttendanceRecord[]
}

model AttendanceRecord {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  vessel         Vessel    @relation(fields: [vesselId], references: [id])
  vesselId       String
  crewId         String
  crewPosition   String
  photo          String
  latitude       Float
  longitude      Float
  photoTimeTaken DateTime?
  photoLatitude  Float?
  photoLongitude Float?
}

model CycleTimeCOA {
  id                                    String          @id @default(uuid())
  createdAt                             DateTime        @default(now())
  updatedAt                             DateTime        @updatedAt
  user                                  User            @relation(fields: [userId], references: [id])
  userId                                String
  startDate                             DateTime
  year                                  Int
  month                                 String
  trip                                  Int
  fleet                                 String
  tugboatOrSpob                         String
  obOrSpob                              String
  route                                 String
  estimatedFuel                         Int?
  actualFuel                            Int?
  distance                              Int?
  startFromJettyLoading                 DateTime?
  orderAssistTugboatEntryJettyLoading   DateTime?
  startAnchorUpJettyLoading             DateTime?
  finishAnchorUpJettyLoading            DateTime?
  assistConnectEntryJettyLoading        DateTime?
  berthingJettyLoading                  DateTime?
  loadingMasterOnboardJettyLoading      DateTime?
  startLoadingJettyLoading              DateTime?
  finishLoadingJettyLoading             DateTime?
  startSoundingJettyLoading             DateTime?
  finishSoundingJettyLoading            DateTime?
  orderAssistTugboatExitJettyLoading    DateTime?
  assistConnectExitJettyLoading         DateTime?
  castOffJettyLoading                   DateTime?
  fullAwaySTS                           DateTime?
  arrivedAtSTS                          DateTime?
  orderAssistTugboatEntrySTS            DateTime?
  assistConnectEntrySTS                 DateTime?
  berthingSTS                           DateTime?
  loadingMasterOnboardSTS               DateTime?
  startLoadingSTS                       DateTime?
  finishLoadingSTS                      DateTime?
  startSoundingSTS                      DateTime?
  finishSoundingSTS                     DateTime?
  orderAssistTugboatExitSTS             DateTime?
  assistConnectExitSTS                  DateTime?
  castOffSTS                            DateTime?
  fullAwayJettyDischarge                DateTime?
  arrivedAtJettyDischarge               DateTime?
  orderAssistTugboatEntryJettyDischarge DateTime?
  startAnchorUpJettyDischarge           DateTime?
  finishAnchorUpJettyDischarge          DateTime?
  assistConnectEntryJettyDischarge      DateTime?
  berthingJettyDischarge                DateTime?
  loadingMasterOnboardJettyDischarge    DateTime?
  startDischargeJettyDischarge          DateTime?
  finishDischargeJettyDischarge         DateTime?
  documentCargoOnboardJettyDischarge    DateTime?
  orderAssistTugboatExitJettyDischarge  DateTime?
  assistConnectExitJettyDischarge       DateTime?
  castOffJettyDischarge                 DateTime?
  arrivedInPulauAtas                    DateTime?
  fullAwayAfterDischarge                DateTime?
  finishInJettyLoading                  DateTime?
  delayNotesCOA                         DelayNotesCOA[]
}

model DelayNotesCOA {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  CycleTimeCOA   CycleTimeCOA? @relation(fields: [cycleTimeCOAId], references: [id])
  cycleTimeCOAId String?
  route          String
  activity       String
  type           String
  notes          String
}
